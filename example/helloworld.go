package main

import (
	"net/http"

	echo "github.com/labstack/echo/v4"
	"github.com/xsean2020/go-web-server/router" // docs is generated by Swag CLI, you have to import it.
)

// Demo for controller
func init() {
	// 全局注册到srv 中，自动生成路由规则
	router.Register(&HellWorld{})
}

type HellWorld struct{}

// URI 前缀
func (c *HellWorld) Group() string {
	return ""
}

// 替换 uri 生成规则
func (c *HellWorld) Alias() map[string]string {
	return map[string]string{"get_hello_work": "/hello"}
}

// controller 需要单独使用的中间件
func (c *HellWorld) Middlewares() []echo.MiddlewareFunc {
	return nil
}

type HellWorldResp struct {
	Msg string
}

// 命名规则  HttpMetho_HttpURI
// Get_Hello_world
// GET     /hello/world
// Swagger Config
// Get_Hello godoc
// @Summary 输出helloword
// @Description helloword
// @Success 200 {object} HellWorldResp
// @Header 200 {string} Token "qwerty"
// @Router /api/v2/hello [get]
func (c *HellWorld) Hello(cc echo.Context) error {
	return cc.JSON(http.StatusOK, struct{ Msg string }{"HellWorld"})
}

// POST /
func (c *HellWorld) POST(cc echo.Context) error {
	return cc.JSON(http.StatusOK, struct{ Msg string }{"HellWorld"})
}

// PUT /
func (c *HellWorld) PUT(cc echo.Context) error {
	return cc.JSON(http.StatusOK, struct{ Msg string }{"HellWorld"})
}

// GET /id
func (c *HellWorld) GET_id(cc echo.Context) error {
	return cc.JSON(http.StatusOK, struct{ Msg string }{"HellWorld"})
}

// GET  /:user/:id
func (c *HellWorld) Get__user__id(cc echo.Context) error {
	return cc.JSON(http.StatusOK, struct{ Msg string }{"HellWorld"})
}

// POST /:id
func (c *HellWorld) POST__ID(cc echo.Context) error {
	return cc.JSON(http.StatusOK, struct{ Msg string }{"HellWorld"})
}

// POST /
func (c *HellWorld) Delete(cc echo.Context) error {
	return cc.JSON(http.StatusOK, struct{ Msg string }{"HellWorld"})
}
